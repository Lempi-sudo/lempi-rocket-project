package main

import (
	"context"
	"errors"
	"log"
	"net"
	"net/http"
	"os"
	"os/signal"
	"sync"
	"syscall"
	"time"

	"github.com/go-chi/chi/v5"
	"github.com/go-chi/chi/v5/middleware"
	"github.com/google/uuid"
	"google.golang.org/grpc"
	"google.golang.org/grpc/credentials/insecure"

	orderV1 "github.com/Lempi-sudo/lempi-rocket-project/shared/pkg/openapi/order/v1"
	inventoryV1 "github.com/Lempi-sudo/lempi-rocket-project/shared/pkg/proto/inventory/v1"
	paymentV1 "github.com/Lempi-sudo/lempi-rocket-project/shared/pkg/proto/payment/v1"
)

const (
	orderHttpPort    = "8080"
	inventoryAddress = "localhost:50052"
	paymentAddress   = "localhost:50051"
	// –¢–∞–π–º–∞—É—Ç—ã –¥–ª—è HTTP-—Å–µ—Ä–≤–µ—Ä–∞
	readHeaderTimeout = 5 * time.Second
	shutdownTimeout   = 10 * time.Second
)

var (
	ErrOrderAlreadyPaid error = errors.New("order has already paid")
	ErrOrderNotFound    error = errors.New("order not found")
)

type OrderStorage struct {
	orders map[string]*orderV1.OrderDto
	mu     sync.RWMutex
}

func NewOrderStorage() *OrderStorage {
	return &OrderStorage{
		orders: make(map[string]*orderV1.OrderDto),
	}
}

func (s *OrderStorage) GetOrder(uuid string) *orderV1.OrderDto {
	s.mu.RLock()
	defer s.mu.RUnlock()

	order, ok := s.orders[uuid]
	if !ok {
		return nil
	}

	return order
}

func (s *OrderStorage) UpdateOrder(uuid string, order *orderV1.OrderDto) {
	s.mu.Lock()
	defer s.mu.Unlock()

	s.orders[uuid] = order
}

func (s *OrderStorage) CancelOrder(uuid string) error {
	s.mu.RLock()
	defer s.mu.RUnlock()
	if _, ok := s.orders[uuid]; !ok {
		return ErrOrderNotFound
	}
	if s.orders[uuid].Status == orderV1.OrderStatusPAID {
		return ErrOrderAlreadyPaid
	}
	if s.orders[uuid].Status == orderV1.OrderStatusPENDINGPAYMENT {
		s.orders[uuid].Status = orderV1.OrderStatusCANCELLED
	}
	return nil
}

type OrderHandler struct {
	orderV1.UnimplementedHandler
	orderStorage *OrderStorage
}

func NewOrderHandler(storage *OrderStorage) *OrderHandler {
	return &OrderHandler{
		orderStorage: storage,
	}
}

func (h *OrderHandler) CreateOrder(_ context.Context, req *orderV1.CreateOrderRequest) (orderV1.CreateOrderRes, error) {
	ctx := context.Background()
	conn, err := grpc.NewClient(
		inventoryAddress,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		return &orderV1.CreateOrderInternalServerError{
			Message: "Internal server error",
			Code:    500,
		}, nil
	}
	defer func() {
		if cerr := conn.Close(); cerr != nil {
			log.Printf("failed to close connect: %v", cerr)
		}
	}()

	// –°–æ–∑–¥–∞–µ–º gRPC –∫–ª–∏–µ–Ω—Ç
	client := inventoryV1.NewInventoryServiceClient(conn)

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UUID –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
	var partUuids []string
	for _, uuid := range req.GetPartUuids() {
		partUuids = append(partUuids, uuid.String())
	}

	// –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ inventory —Å–µ—Ä–≤–∏—Å—É
	listPartsReq := &inventoryV1.ListPartsRequest{
		Filter: &inventoryV1.PartsFilter{
			Uuids: partUuids,
		},
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
	response, err := client.ListParts(ctx, listPartsReq)
	if err != nil {
		log.Printf("Error calling inventory service: %v", err)
		return &orderV1.CreateOrderInternalServerError{
			Message: "Failed to get parts from inventory",
			Code:    500,
		}, nil
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –Ω–∞–π–¥–µ–Ω—ã
	if len(response.Parts) != len(partUuids) {
		return &orderV1.CreateOrderBadRequest{
			Message: "Some parts not found in inventory",
			Code:    400,
		}, nil
	}

	totalPrice := 0.0
	for _, part := range response.GetParts() {
		totalPrice += part.Price
	}

	orderUUID, _ := uuid.NewRandom()
	h.orderStorage.UpdateOrder(orderUUID.String(),
		&orderV1.OrderDto{
			OrderUUID:  orderUUID,
			TotalPrice: totalPrice,
			UserUUID:   req.GetUserUUID(),
			PartUuids:  req.GetPartUuids(),
			Status:     orderV1.OrderStatusPENDINGPAYMENT,
		})
	return &orderV1.CreateOrderResponse{
		TotalPrice: totalPrice,
		OrderUUID:  orderUUID,
	}, nil
}

func (h *OrderHandler) PayOrder(_ context.Context, req *orderV1.PayOrderRequest, params orderV1.PayOrderParams) (orderV1.PayOrderRes, error) {
	ctx := context.Background()
	conn, err := grpc.NewClient(
		paymentAddress,
		grpc.WithTransportCredentials(insecure.NewCredentials()),
	)
	if err != nil {
		return &orderV1.PayOrderInternalServerError{
			Message: "Internal server error",
			Code:    500,
		}, nil
	}
	defer func() {
		if cerr := conn.Close(); cerr != nil {
			log.Printf("failed to close connect: %v", cerr)
		}
	}()

	orderUUUID := params.OrderUUID.String()
	h.orderStorage.mu.RLock()
	// defer h.orderStorage.mu.RUnlock() –µ—Å–ª–∏ –¥–µ–ª–∞—Ç—å —Ç–∞–∫, —Ç–æ –ª–æ—á–∏—Ç—Å—è updateOrder
	order := h.orderStorage.GetOrder(orderUUUID)
	if order == nil {
		h.orderStorage.mu.RUnlock()
		return &orderV1.PayOrderNotFound{
			Code:    404,
			Message: "Order not found",
		}, nil
	}
	h.orderStorage.mu.RUnlock()

	var paymentMethod paymentV1.PaymentMethod
	switch req.GetPaymentMethod() {
	case orderV1.PaymentMethodCARD:
		paymentMethod = paymentV1.PaymentMethod_CARD
	case orderV1.PaymentMethodCREDITCARD:
		paymentMethod = paymentV1.PaymentMethod_CREDIT_CARD
	case orderV1.PaymentMethodSBP:
		paymentMethod = paymentV1.PaymentMethod_SBP
	case orderV1.PaymentMethodINVESTORMONEY:
		paymentMethod = paymentV1.PaymentMethod_INVESTOR_MONEY
	case orderV1.PaymentMethodUNKNOWN:
		paymentMethod = paymentV1.PaymentMethod_UNKNOWN_UNSPECIFIED
	default:
		return &orderV1.PayOrderBadRequest{
			Code:    400,
			Message: "Order not found",
		}, nil
	}

	userUUID := order.GetUserUUID().String()

	// –°–æ–∑–¥–∞–µ–º gRPC –∫–ª–∏–µ–Ω—Ç
	client := paymentV1.NewPaymentServiceClient(conn)

	payOrderRequest := &paymentV1.PayOrderRequest{
		Order: &paymentV1.OrderInfo{
			OrderUuid:     orderUUUID,
			UserUuid:      userUUID,
			PaymentMethod: paymentMethod,
		},
	}

	payOrderResponse, err := client.PayOrder(ctx, payOrderRequest)
	if err != nil {
		return &orderV1.PayOrderInternalServerError{
			Message: "Internal server error",
			Code:    500,
		}, nil
	}

	transactionUUIDStr := payOrderResponse.GetUuid()

	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ UUID
	transactionUUID, err := uuid.Parse(transactionUUIDStr)
	if err != nil {
		return &orderV1.PayOrderInternalServerError{
			Message: "Invalid transaction UUID",
			Code:    500,
		}, nil
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
	newOrder := &orderV1.OrderDto{
		OrderUUID:       order.GetOrderUUID(),
		TotalPrice:      order.GetTotalPrice(),
		UserUUID:        order.GetUserUUID(),
		PartUuids:       order.GetPartUuids(),
		Status:          orderV1.OrderStatusPAID,
		TransactionUUID: orderV1.OptNilUUID{Set: true, Value: transactionUUID},
		PaymentMethod:   orderV1.OptPaymentMethod{Set: true, Value: req.GetPaymentMethod()},
	}

	// –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
	h.orderStorage.UpdateOrder(orderUUUID, newOrder)

	return &orderV1.PayOrderResponse{
		TransactionUUID: transactionUUID,
	}, nil
}

func (h *OrderHandler) CancelOrderByUUID(_ context.Context, params orderV1.CancelOrderByUUIDParams) (orderV1.CancelOrderByUUIDRes, error) {
	// –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º UUID –≤ —Å—Ç—Ä–æ–∫—É
	orderUUIDStr := params.OrderUUID.String()

	err := h.orderStorage.CancelOrder(orderUUIDStr)
	if err != nil {
		if errors.Is(err, ErrOrderNotFound) {
			return &orderV1.CancelOrderByUUIDNotFound{
				Message: "Order not found",
				Code:    404,
			}, nil
		}
		if errors.Is(err, ErrOrderAlreadyPaid) {
			return &orderV1.CancelOrderByUUIDConflict{
				Message: "Order has already paid",
				Code:    409,
			}, nil
		}
		// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—à–∏–±–∫—É 500 - –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
		return &orderV1.CancelOrderByUUIDInternalServerError{
			Message: "Internal server error",
			Code:    500,
		}, nil
	}
	// –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç 204 - –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω
	return &orderV1.CancelOrderByUUIDNoContent{}, nil
}

func (h *OrderHandler) GetOrderByUUID(_ context.Context, params orderV1.GetOrderByUUIDParams) (orderV1.GetOrderByUUIDRes, error) {
	uuid := params.OrderUUID.String()
	h.orderStorage.mu.RLock()
	defer h.orderStorage.mu.RUnlock()
	order := h.orderStorage.GetOrder(uuid)
	if order == nil {
		return &orderV1.GetOrderByUUIDNotFound{
			Code:    404,
			Message: "Order not found",
		}, nil
	}
	return order, nil
}

func main() {
	storage := NewOrderStorage()

	orderHandler := NewOrderHandler(storage)

	orderServer, err := orderV1.NewServer(orderHandler)
	if err != nil {
		log.Fatalf("–æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞ OpenAPI: %v", err)
	}
	r := chi.NewRouter()

	// –î–æ–±–∞–≤–ª—è–µ–º middleware
	r.Use(middleware.Logger)
	r.Use(middleware.Recoverer)
	r.Use(middleware.Timeout(10 * time.Second))

	// –ú–æ–Ω—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ OpenAPI
	r.Mount("/", orderServer)

	// –ó–∞–ø—É—Å–∫–∞–µ–º HTTP-—Å–µ—Ä–≤–µ—Ä
	server := &http.Server{
		Addr:              net.JoinHostPort("localhost", orderHttpPort),
		Handler:           r,
		ReadHeaderTimeout: readHeaderTimeout, // –ó–∞—â–∏—Ç–∞ –æ—Ç Slowloris –∞—Ç–∞–∫ - —Ç–∏–ø DDoS-–∞—Ç–∞–∫–∏, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–π
		// –∞—Ç–∞–∫—É—é—â–∏–π —É–º—ã—à–ª–µ–Ω–Ω–æ –º–µ–¥–ª–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç HTTP-–∑–∞–≥–æ–ª–æ–≤–∫–∏, —É–¥–µ—Ä–∂–∏–≤–∞—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∏ –∏—Å—Ç–æ—â–∞—è
		// –ø—É–ª –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. ReadHeaderTimeout –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–∫—Ä—ã–≤–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ,
		// –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ —É—Å–ø–µ–ª –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è.
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
	go func() {
		log.Printf("üöÄ HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É %s\n", orderHttpPort)
		err = server.ListenAndServe()
		if err != nil && !errors.Is(err, http.ErrServerClosed) {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
		}
	}()

	// Graceful shutdown
	quit := make(chan os.Signal, 1)
	signal.Notify(quit, syscall.SIGINT, syscall.SIGTERM)
	<-quit

	log.Println("üõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞...")

	// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∞–π–º–∞—É—Ç–æ–º –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
	ctx, cancel := context.WithTimeout(context.Background(), shutdownTimeout)
	defer cancel()

	err = server.Shutdown(ctx)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: %v\n", err)
	}

	log.Println("‚úÖ –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
}
